<!DOCTYPE html>
<html>
<head>
  <title>Turn-Based Game</title>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io('http://localhost:3000');

    let currentPlayer = 1;
    let totalPlayers = 2;
    let totalRounds = 5;
    let currentRound = 1;
    let captureCount = 0;
    let capturedData = [];
    let capturingEnabled = false;
    let roundData = {};
    let playerScores = {};
    let initialNumber = 501;
    let videoElement = null;

    // Sound effect for scoring a point
    const audio = new Audio('./assets/blaster-2-81267.mp3');

  // Mapping array for input to number
    const mapping = [
        // Mapping entries here
      { input: "4,3", number: "20", type: "s" },
      { input: "5,3", number: "60", type: "t" },
      { input: "1,3", number: "40", type: "d" },

      { input: "2,9", number: "1", type: "s"  },
      { input: "0,9", number: "3", type: "t" },
      { input: "1,9", number: "2", type: "d" },

      { input: "2,8", number: "18", type: "s"  },
      { input: "0,8", number: "54", type: "t" },
      { input: "1,8", number: "36", type: "d" },

      { input: "2,7", number: "4", type: "s"  },
      { input: "0,7", number: "12", type: "t" },
      { input: "1,7", number: "8", type: "d" },

      { input: "2,6", number: "13", type: "s"  },
      { input: "0,6", number: "39", type: "t" },
      { input: "1,6", number: "26", type: "d" },

      { input: "2,5", number: "6", type: "s"  },
      { input: "0,5", number: "18", type: "t" },
      { input: "1,5", number: "12", type: "d" },

      { input: "2,4", number: "10", type: "s"  },
      { input: "0,4", number: "30", type: "t" },
      { input: "1,4", number: "20", type: "d" },

      { input: "4,4", number: "15", type: "s"  },
      { input: "6,4", number: "45", type: "t" },
      { input: "5,4", number: "30", type: "d" },

      { input: "4,5", number: "2", type: "s"  },
      { input: "6,5", number: "6", type: "t" },
      { input: "5,5", number: "4", type: "d" },

      { input: "4,6", number: "17", type: "s"  },
      { input: "6,6", number: "51", type: "t" },
      { input: "5,6", number: "34", type: "d" },

      { input: "4,7", number: "3", type: "s"  },
      { input: "6,7", number: "9", type: "t" },
      { input: "5,7", number: "6", type: "d" },

      { input: "4,8", number: "19", type: "s"  },
      { input: "6,8", number: "57", type: "t" },
      { input: "5,8", number: "38", type: "d" },

      { input: "4,9", number: "7", type: "s"  },
      { input: "6,9", number: "21", type: "t" },
      { input: "5,9", number: "14", type: "d" },

      { input: "4,3", number: "16", type: "s"  },
      { input: "6,3", number: "32", type: "t" },
      { input: "5,3", number: "48", type: "d" },

      { input: "4,2", number: "8", type: "s"  },
      { input: "6,2", number: "24", type: "t" },
      { input: "5,2", number: "16", type: "d" },

      { input: "4,1", number: "11", type: "s"  },
      { input: "6,1", number: "33", type: "t" },
      { input: "5,1", number: "22", type: "d" },

      { input: "4,0", number: "14", type: "s"  },
      { input: "6,0", number: "42", type: "t" },
      { input: "5,0", number: "28", type: "d" },

      { input: "2,0", number: "9", type: "s"  },
      { input: "0,0", number: "27", type: "t" },
      { input: "1,0", number: "18", type: "d" },

      { input: "2,1", number: "12", type: "s"  },
      { input: "0,1", number: "36", type: "t" },
      { input: "1,1", number: "24", type: "d" },

      { input: "2,2", number: "5", type: "s"  },
      { input: "0,2", number: "15", type: "t" },
      { input: "1,2", number: "10", type: "d" },

      { input: "3,1", number: "25", type: "b"  },
      { input: "3,0", number: "110", type: "be" },
      ];

        // Map input data to numbers
        function mapInputToNumber(input) {
      const mappedItem = mapping.find((item) => item.input.replace(/[\s,]/g, '') === input.toString().replace(/[\s,]/g, ''));
      if (mappedItem) {
        return mappedItem.number.toString();
      } else {
        return "0"; // Default value for unmapped inputs
      }
    }

    
    function checkForChars(input) {
      const mappedItem = mapping.find((item) => item.input.replace(/[\s,]/g, '') === input.toString().replace(/[\s,]/g, ''));
      if (mappedItem) {
        return mappedItem.type.toString();
      } else {
        return "s"; // Default value for unmapped inputs
      }
    }

    // Initialize scores for each player
    function initializeScores() {
      for (let i = 1; i <= totalPlayers; i++) {
        playerScores[`player${i}`] = 501;
      }
    }

    initializeScores();

    socket.on('arduinoData', (data) => {
      const mappedItemToDigit = mapInputToNumber(data);
      const checkFOrCharsData = checkForChars(data)
      if (capturingEnabled) {
        if (captureCount < 3) {
          capturedData.push(mappedItemToDigit);
          captureCount++;
          
          const capturedString = capturedData.join(' ');
          roundData[`round${currentRound}`] = roundData[`round${currentRound}`] || {};
          roundData[`round${currentRound}`][`player${currentPlayer}`] = capturedString;
          document.getElementById(`capturedData${currentPlayer}`).textContent = capturedString;

          const score = calculateScore(mappedItemToDigit);
          document.getElementById(`score${currentPlayer}`).textContent = `Score: ${playerScores[`player${currentPlayer}`]}`;

          showCurentScore(currentPlayer)

          // Play sound effect when a point is scored
          playSoundEffect(checkFOrCharsData);
        }
      }
    });

// Calculate the score based on the subtracted values
function calculateScore(number) {
  let result = playerScores[`player${currentPlayer}`];
  let previousScore = result;

  let tempResult = result - parseInt(number);

  if (tempResult <= 0) {
    if (tempResult === 0) {
      showWinnerDialog(currentPlayer, previousScore);
    } else {
      showNegativeScoreDialog()
    }
    result = previousScore; // Restore previous score if the result is non-positive
    capturingEnabled = false; // Disable capturing functionality
    
  } else {
    result = tempResult;
  }

  playerScores[`player${currentPlayer}`] = result;
  return result;
}


    function startNextTurn() {
      if (!capturingEnabled) {
        capturingEnabled = true;
        captureCount = 0;
        capturedData = [];
      }
      document.getElementById("currentRoundData").textContent = `Round ${currentRound - 1} History:\n${JSON.stringify(roundData[`round${currentRound - 1}`], null, 2)}`;
      document.getElementById("nextPlayerButton").style.display = "block";
      document.getElementById("startGame").style.display = "none";
    }

  function nextPlayerTurn() {
  captureCount = 0;
  capturedData = [];

  if (currentPlayer === totalPlayers) {
    currentPlayer = 1;
    showCurentScore(currentPlayer)
    currentRound++;

    if (currentRound > totalRounds) {
      let winner = null;
      let lowestScore = Infinity;

      // Find the player with the lowest score
      for (let i = 1; i <= totalPlayers; i++) {
        const playerScore = playerScores[`player${i}`];
        if (playerScore < lowestScore) {
          lowestScore = playerScore;
          winner = i;
        }
      }
      // Display the winner
      showWinnerDialog(currentPlayer, playerScore);
      return; // Exit the function and stop the game
    }
  } else {
    currentPlayer++;
    showCurentScore(currentPlayer)
  }

  capturingEnabled = true; // Enable capturing functionality for the next player
  document.getElementById("currentRoundData").textContent = `Round ${currentRound - 1} History:\n${JSON.stringify(roundData[`round${currentRound - 1}`], null, 2)}`;
  removeDialogOverlay(); // Remove dialog overlay when next player's turn starts
  }

    // Play sound effect function
    function playSoundEffect(data) {

      let audioSrc = "";

      switch (data) {
          case "s":
            audioSrc = "./assets/blaster-2-81267.mp3";
            break;
          case "d":
            audioSrc = "./assets/Double.mp3";
            break;
          case "b":
            audioSrc = "./assets/Bull.mp3";
            break;
            case "be":
            audioSrc = "./assets/Bull.mp3";
            break;
          case "t":
            audioSrc = "./assets/Triple.mp3";
            // Add code to handle video element here
            videoElement = document.createElement("video");
            videoElement.src = "./assets/WHO.f4v.mp4";
            videoElement.style.position = "fixed";
            videoElement.style.top = "0";
            videoElement.style.left = "0";
            videoElement.style.width = "100%";
            videoElement.style.height = "100%";
            videoElement.style.zIndex = "9999";
            videoElement.autoplay = true;
            videoElement.controls = false;

            videoElement.addEventListener("ended", () => {
              document.body.removeChild(videoElement);
              videoElement = null;
              // Add code to close the video overlay or perform any other action
              // when the video finishes playing.
            });

          document.body.appendChild(videoElement);
            break;
          default:
            audioSrc = "./assets/blaster-2-81267.mp3";
            break;
        }

        const audio = new Audio(audioSrc);
        audio.addEventListener("ended", () => {
          // Add code to handle actions when the audio finishes playing
          audioSrc = "";
        });
        audio.play();
    }
    
    // Play sound effect function
    function playSoundEffectBusted() {
      const audio = new Audio("./assets/Busted.mp3");
      audio.play();
    }

    // Show negative score dialog
    function showNegativeScoreDialog() {
      const dialogOverlay = document.createElement("div");
      dialogOverlay.classList.add("dialog-overlay");

      const dialogBox = document.createElement("div");
      dialogBox.classList.add("dialog-box");
      dialogBox.textContent = `Player ${currentPlayer}'s score is negative! Press "Next Player's Turn"`;

      dialogOverlay.appendChild(dialogBox);
      document.body.appendChild(dialogOverlay);

      // Play sound effect
      playSoundEffectBusted();
    }

    function showWinnerDialog(winner, score) {
      const dialogOverlay = document.createElement("div");
      dialogOverlay.classList.add("dialog-overlay");

      const dialogBox = document.createElement("div");
      dialogBox.classList.add("dialog-box");
      dialogBox.textContent = `Player ${winner} wins with a score of ${score}!`;

      dialogOverlay.appendChild(dialogBox);
      document.body.appendChild(dialogOverlay);

      // Play sound effect
      playSoundEffect();
    }

    // Remove dialog overlay function
    function removeDialogOverlay() {
      const dialogOverlay = document.querySelector(".dialog-overlay");
      if (dialogOverlay) {
        dialogOverlay.remove();
      }
    }

    document.addEventListener("keydown", function (event) {
  if (event.key === "Enter") {
    // Trigger the hidden button click when Enter key is pressed
    event.preventDefault();
    document.getElementById("turnForm").dispatchEvent(new Event("submit"));
  }
});

    // Remove dialog overlay function
    function showCurentScore(input) {
      document.getElementById(`currentScore`).textContent = `${playerScores[`player${input}`]}`;
      document.getElementById(`currentPlayer`).textContent = `${[`Player ${currentPlayer}`]}`;
    }


  </script>
</head>

<body>
  <h1 id="currentPlayer">Player 1</h1>

  <div>
    <p id="currentScore">501</p>
  </div>

  <div class="players-container">

    <div id="player1style">
      <h2 id="player1">Player 1</h2>
      <div id="capturedData1"></div>
      <p id="score1">Score: 501</p>
    </div>

    <div id="player2style">
      <h2 id="player2">Player 2</h2>
      <div id="capturedData2"></div>
      <p id="score2">Score: 501</p>
    </div>
  </div>
  <button id="startGame" onclick="startNextTurn()">Start Game</button>
  <button id="nextPlayerButton" onclick="nextPlayerTurn()" style="display: none;">Next Player's Turn</button>
  <!-- Add a form element with an input field and a hidden button -->
  <form id="turnForm" onsubmit="event.preventDefault(); nextPlayerTurn();">
    <button type="submit" style="display: none;"></button>
  </form>

  <h2>Round History</h2>
  <pre id="currentRoundData"></pre>

    <!-- Add the video element -->
    <video id="myVideo" style="display: none;">
      <source type="video/mp4">
    </video>
</html>
